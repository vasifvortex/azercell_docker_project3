version: "3.8"

networks:
  spark-net:
    external: true
  kafka-net:
    ipam:
      config:
        - subnet: 172.20.0.0/16
  db-net:
    driver: bridge

volumes:
  minio:
    driver: local
  pgdata:
    driver: local

services:
  ################
  # Spark + MinIO
  ################
  spark-master:
    container_name: spark-master
    build:
      context: ./Spark
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: "2g"
    ports:
      - "4040:4040"
      - "7077:7077"
      - "8080:8080"
      - "18080:18080"
    networks:
      - spark-net
      - kafka-net
      - db-net
    command: sh spark-master.sh

  spark-worker:
    build:
      context: ./Spark
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: "2g"
    depends_on:
      - spark-master
    ports:
      - "8081-8089:8081"
    networks:
      - spark-net
      - kafka-net
      - db-net
    command: sh spark-worker.sh

  spark-client:
    container_name: spark-client
    build:
      context: ./spark-client
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: "2g"
    ports:
      - "8888:8888"
      - "4041:4040"
    networks:
      - spark-net
      - kafka-net
      - db-net
    volumes:
      - ./spark_client/examples:/opt/examples

  minio:
    container_name: minio
    image: "minio/minio:RELEASE.2023-05-04T21-44-30Z"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: "2g"
    volumes:
      - minio:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - spark-net
    environment:
      MINIO_ACCESS_KEY: "telcoaz"
      MINIO_SECRET_KEY: "Telco12345"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  #########################
  # Kafka + Schema Registry
  #########################
  kafka1:
    container_name: kafka1
    image: telco_kafka:latest
    build:
      context: .
    ports:
      - "9192:9192"
      - "9094:9092"
    networks:
      kafka-net:
        ipv4_address: 172.20.0.11
    volumes:
      - ./config/kafka1/server.properties:/kafka/config/server.properties
      - ./data/kafka1/:/data/kafka/

  kafka2:
    container_name: kafka2
    image: telco_kafka:latest
    build:
      context: .
    ports:
      - "9193:9192"
      - "9095:9092"
    networks:
      kafka-net:
        ipv4_address: 172.20.0.12
    volumes:
      - ./config/kafka2/server.properties:/kafka/config/server.properties
      - ./data/kafka2/:/data/kafka/

  kafka3:
    container_name: kafka3
    image: telco_kafka:latest
    build:
      context: .
    ports:
      - "9194:9192"
      - "9096:9092"
    networks:
      kafka-net:
        ipv4_address: 172.20.0.13
    volumes:
      - ./config/kafka3/server.properties:/kafka/config/server.properties
      - ./data/kafka3/:/data/kafka/

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
    networks:
      - kafka-net

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    depends_on:
      - kafka1
    ports:
      - "8081:8081"
    networks:
      kafka-net:
        ipv4_address: 172.20.0.14
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  #########################
  # PostgreSQL
  #########################
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: telco
      POSTGRES_PASSWORD: Telco12345
      POSTGRES_DB: telco_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - db-net
      - spark-net
